<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solutions</title>
    <link rel="stylesheet" type="text/css" href="styles/rule1.css" >
    <link rel="canonical" href="https://younes.dev.onrender.com/">
    <link rel="stylesheet" href="/styles/all.min.css">

</head>
<body>
  <!-- startbseettingg box -->
  <div class="settings-box">
    <div class="toggle-settings">
        <i class="fas fa-clock fa-spin"></i>
    </div>
    <div class="settings-content">
        <div class="option-box">
            <h4>colors</h4>

            <ul class="colors-list">
                <li class="active" data-color="#FF9800"></li>
                <li data-color="#E91E63"></li>
                <li data-color="#009688"></li>
                <li data-color="#03A9F4"></li>
                <li data-color="#4CAF50"></li>
            </ul>
        </div>
        <div class="option-box">
          <h4>Dark_Mode</h4>
          <div class="bullets-option">
            <span class="yes active" data-display="show">yes</span>
            <span class="no" data-display="hide">no</span>
           </div>
        </div>
        <div class="option-box" style="display: none;">
            <h4>CHANGE Background </h4>
           <div class="random-backgrounds">
            <span class="yes active" data-background="yes">yes</span>
            <span class="no" data-background="no">no</span>
           </div>
        </div>
        <div class="option-box" style="display: none;">
            <h4>show bullets</h4>
           <div class="bullets-option">
            <span class="yes active" data-display="show">yes</span>
            <span class="no" data-display="hide">no</span>
           </div>
        </div>
        <button class="reset-options">
            reset options
        </button>
   </div>
</div>
    <!-- end setting box -->

      <!-- start articles form -->
  <form method="post" action="/articles" id="form-of-article">
    <h2>Create a New Article</h2>
    <label for="article-title">Title:</label>
    <input type="text" id="article-title" name="title" required placeholder="Enter the tech or what kind of stack you used to solve this problem" minlength="5" maxlength="100"><br>
  
    <label for="article-category">Problem:</label>
    <input type="text" id="article-category" name="category" required placeholder="Enter the problem and error if you have it" minlength="5" maxlength="100"><br>
  
    <label for="article-content">Solution:</label>
    <textarea id="article-content" name="content" rows="10" cols="50" required placeholder="Here enter how you solve this problem" minlength="10"></textarea><br>
  
    <label for="article-author-name">Author Name:</label>
    <input type="text" id="article-author-name" name="authorName" required placeholder="Enter your name" minlength="3" maxlength="50"><br>
  
    <label for="article-author-specialisation">Author Specialisation:</label>
    <input type="text" id="article-author-specialisation" name="authorSpecialisation" required placeholder="Enter your specialisation" minlength="5" maxlength="50"><br>
  
    <button type="submit" id="submit-article">Submit</button>
  </form>
  <!-- end articles form -->
  <!-- start search form -->
  <div class="search">
    <form action="/search" method="get">
      <label for="search-input">Search for:</label>
      <input type="text" id="search-input" name="query" placeholder="Type Something...">
      <select name="type" id="search-type">
        <option value="problem">Problem</option>
        <option value="author">Author</option>
      </select>
      <button type="submit">Search</button>
    </form>
  </div>
    <!-- end  search form -->
<!-- start articles from database  -->
<section>
  <h2>Existing Articles</h2>
  <div id="articles-container">
    <% if (!articles && !timeout) { %>
      <p>Loading articles...</p>
      <% var timeout = setTimeout(function() { %>
        <p>No articles to display</p>
      <% }, 3000) %>
    <% } else if (!articles && timeout) { %>
      <p>No articles to display</p>
      <% clearTimeout(timeout) %>
    <% } else if (articles.length === 0) { %>
      <p>No articles to display</p>
    <% } else { %>
      <% articles.forEach(function(article) { %>
        <div class="article-container">
          <h3><%= article.title %></h3>
          <p>Category: <%= article.category %></p>
          <p><%= article.content %></p>
          <p>By <%= article.authorName %>, Author Specialization: <%= article.authorSpecialization %></p>
          <hr>
          <div class="actions-container">
            <span class="comment-button" data-article-id="<%= article._id %>"><span class="comment-count"><%= article.commentCount %></span><img src="images/comment.png" alt="comment" />Comment</span>
            <span class="share-button" data-article-id="<%= article._id %>">
            <span class="share-count"><%= article.shareCount %></span><img src="images/send.png" alt="share" />Share</span>
            <div class="share-container">
              <div class="share-buttons">
                  <a class="facebook" target="_blank"><i class="fab fa-facebook"></i></a>
                  <a class="twitter" target="_blank"><i class="fab fa-twitter"></i></a>
                  <a class="linkedin" target="_blank"><i class="fab fa-linkedin"></i></a>
                  <a class="reddit" target="_blank"><i class="fab fa-reddit"></i></a>
              </div>
          </div>       
            <span class="like-button" data-article-id="<%= article._id %>"><span class="like-count"><%= article.likeCount %></span><img src="images/like.png" alt="like" />Like</span>
          </div>
          <div id="comments-container-<%= article._id %>" class="comments-container">
            <form id="comment-form-<%= article._id %>" class="comment-form">
              <label for="comment">Comment:</label>
              <textarea id="comment-<%= article._id %>" name="comment" required></textarea>
              <button type="submit">Submit</button>
            </form>
            <ul id="comment-list-<%= article._id %>"></ul>
          </div>
        </div>
      <% }) %>
    <% } %>
  </div>
</section>
<!-- end articles from database  -->


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>


const searchForm = document.querySelector('.search form');
const searchInput = searchForm.querySelector('#search-input');
const searchType = searchForm.querySelector('#search-type');

searchForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const articleContainers = document.querySelectorAll('.article-container')
  articleContainers.forEach(container => {
  container.classList.remove('matching-article');
  })
  const query = searchInput.value;
  const type = searchType.value;
  
  const response = await fetch(`/search?type=${type}&query=${query}`, { method: 'POST' });
// after getting the response from the server
if (response.ok) {
  const articles = await response.json();
  console.log(articles)

  // get all elements with data-article-id attribute
  const articleElements = document.querySelectorAll('[data-article-id]');
 
  // loop through each element and check if it matches the search result
  let matchingArticleElement = null;
  articleElements.forEach(element => {
    if (element.dataset.articleId === articles[0]._id) {
      // highlight the matching article container
      element.closest('.article-container').classList.add('matching-article');
      matchingArticleElement = element.closest('.article-container');
    }
  });
  
  if (articles.length > 0) {
    // Move the matching article container to the top of the articles container
    if (matchingArticleElement) {
      const articlesContainer = document.getElementById('articles-container');
      articlesContainer.insertBefore(matchingArticleElement, articlesContainer.firstChild);
    }
  } else {
    // Display "No articles found" message
  }
} else {
  // Handle error
}
});
      $(document).ready(function() {
        // start  submit the articles 
        $('#submit-article').on('click', function(event) {
          event.preventDefault();
          // send form data using AJAX
          $.ajax({
            method: 'POST',
            url: '/articles',
            data: {
              title: $('#article-title').val(),
              category: $('#article-category').val(),
              content: $('#article-content').val(),
              authorName: $('#article-author-name').val(),
              authorSpecialisation: $('#article-author-specialisation').val(),
            },
            success: function(data) {
      console.log(data); 
      // create HTML for the new article
      var articleHTML = `
  <div class="article-container">
    <h3>${data.title}</h3>
    <p>Category of problem: ${data.category}</p>
    <p>Solution: ${data.content}</p>
    <p>By ${data.authorName}, Author Specialisation: ${data.authorSpecialisation}</p>
    <hr>
    <div class="actions-container">
      <span class="comment-button" data-article-id="${data.id}">
        <span class="comment-count">${data.commentCount}</span>
        <img src="images/comment.png" alt="comment" />
        Comment
      </span>
      <span class="share-button" data-article-id="${data.id}">
        <span class="share-count">${data.shareCount}</span>
        <img src="images/send.png" alt="share" />
        Share
      </span>
      <span class="like-button" data-article-id="${data.id}">
        <span class="like-count">${data.likeCount}</span>
        <img src="images/like.png" alt="like" />
        Like
      </span>
    </div>
  </div>
`;// Here, we're using the `${}` syntax to insert the values of `data.commentCount`, `data.shareCount`, and `data.likeCount` in the appropriate places in the HTML string. if you aren't familliare with this syntax you can check this link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals

      // append the new article to the list of articles
      $('#articles-container').prepend(articleHTML);
      $('#article-form')[0].reset();

    },error: function(jqXHR, textStatus, errorThrown) {
              console.log(textStatus, errorThrown);
            }
          });
        });
    // end  submit the articles 



const commentButtons = document.querySelectorAll('.comment-button');
commentButtons.forEach(button => {

  button.addEventListener('click', function() {
    const articleId = button.dataset.articleId;
    const commentsContainer = document.querySelector(`#comments-container-${articleId}`);

    if (commentsContainer.style.display === 'none') {
      // If the comments container is hidden, show it
      commentsContainer.style.display = 'block';
    } else {
      // If the comments container is shown, hide it
      commentsContainer.style.display = 'none';
    }
    
    const commentForm = commentsContainer.querySelector('form');
    const commentList = commentsContainer.querySelector('ul');

    
    // Fetch the updated article data from the server
    fetch(`/articles/${articleId}`)
          .then(response => response.json())
          .then(data => {
          //   console.log(data)        
          //  console.log(data.comments)

 // Update the comment list on the page 
 const commentListElement = document.querySelector(`#comment-list-${articleId}`);
    commentListElement.innerHTML = '';
    data.comments.forEach(comment => {
      const commentListItem = document.createElement('li');
      commentListItem.textContent = comment;
      commentListElement.appendChild(commentListItem);
    });

  }).catch(error => {
console.error(error);
  });


      
    commentForm.addEventListener('submit', function(event) {
      event.preventDefault();
      const commentInput = commentForm.querySelector('textarea');
      const commentText = commentInput.value;
   
            const commentListItem = document.createElement('li');
            commentListItem.textContent = commentText;
            commentList.appendChild(commentListItem);
       // Only send the request to the server if there is a comment to submit
  if (commentText.trim()) {
       // Update the comment count on the page

    const data = {comments:commentText }; // Create an object with the comment text
    console.log(data)
    fetch(`/articles/${articleId}/comment`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify(data),
}) .then(response => {
        if (!response.ok) throw new Error('Failed to submit comment');
        console.log('Comment submitted successfully');
      })

      fetch(`/articles/${articleId}`)
          .then(response => response.json())
          .then(data => {
            console.log(data)
            const commentCountElement = button.querySelector('.comment-count');
            commentCountElement.textContent = data.commentCount;
            console.log(data.commentCount);
          })
      .catch(error => {
        console.error(error);
      });
  }
  commentInput.value = ''; // Clear the comment input field    
  })
})       
});


const shareButton = document.querySelectorAll('.share-button');

shareButton.forEach(button => {
  button.addEventListener('click', function(event) {
    // find the closest articles com=ntainer 
    const articlesContainer = this.closest('.article-container');

    //find the share-container that belongs to the article 
    const sharesContainer = articlesContainer.querySelector('.share-container')

    if ( sharesContainer && sharesContainer.style.display === 'none') {
      // If the comments container is hidden, show it
      sharesContainer.style.display = 'block';
    } else {
      // If the comments container is shown, hide it
      sharesContainer.style.display = 'none';
    }

  // find all the anchor tags inside the share container
  const shareAnchors = sharesContainer.querySelectorAll('.share-buttons a');
  // set the href attribute for each anchor tag
  shareAnchors.forEach(anchor => {
    const link = 'https://younes-dev.onrender.com/solution';
    const title = encodeURIComponent(document.querySelector('title').textContent);
    let msg;
    switch(anchor.classList[0]) {
      case 'facebook':
        anchor.href = `https://www.facebook.com/share.php?u=${link}`;
        break;
      case 'twitter':
        msg = encodeURIComponent('Hey, I found this article');
        anchor.href = `http://twitter.com/share?&url=${link}&text=${msg}&hashtags=javascript`;
        break;
      case 'linkedin':
        anchor.href = `https://www.linkedin.com/sharing/share-offsite/?url=${link}`;
        break;
      case 'reddit':
        anchor.href = `http://www.reddit.com/submit?url=${link}&title=${title}`;
        break;
    }
  });













// const shareAnchor = sharesContainer.querySelectorAll('.share-buttons a');

// shareButton.forEach(button => {
//   // find the share container for this article 
//   const shareContainer = button.closest('share-container');

//   //find all the anchor tags inside the share container 
// })
// const link = 'https://younes-dev.onrender.com/solution'                                   //encodeURI(window.location.href);

//  const msg = encodeURIComponent('Hey , I found this article')
//  const title = encodeURIComponent(document.querySelector('title').textContent);
//  console.log([link , msg, title]);

//  // facebook url 
//  const fb = document.querySelector('.facebook');
//  fb.href = `https://www.facebook.com/share.php?u=${link}`;

//  // twitter url
// const twitter = document.querySelector('.twitter');
// twitter.href = `http://twitter.com/share?&url=${link}&text=${msg}&hashtags=javascript`;

// // linkedin url 
// const linkedin = document.querySelector('.linkedin');
// linkedin.href = `https://www.linkedin.com/sharing/share-offsite/?url=${link}`;

// // reddit url 
// const reddit = document.querySelector('.reddit');
// reddit.href = `http://www.reddit.com/submit?url=${link}&title=${title}`;


let shareButtonClicked = false;

sharesContainer.addEventListener('click', function(e) {
  if (shareButtonClicked) {
    return;
  }

  shareButtonClicked = true;

  const articleId = button.dataset.articleId;

  fetch(`/articles/${articleId}/share`, { method: 'POST' })
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to share article');
      }
      console.log('Article shared');

      response.json().then(data => {
        console.log('Updated article data received:', data);       
        const shareCountElement = button.querySelector('.share-count');
        data.shareCount -= 1;
        shareCountElement.textContent = data.shareCount;
        
      })
      .catch(error => {
        console.error('Error parsing JSON response:', error);
      })
      .finally(() => {
        shareButtonClicked = false;
      });
    })
    .catch(error => {
      console.error('Error sharing article:', error);
      shareButtonClicked = false;
    });

});
});
});

//end  event listener for share 


// Add a click event listener to each like button
const likeButtons = document.querySelectorAll('.like-button');

likeButtons.forEach(button => {
  button.addEventListener('click', function() {
    // Disable the button to prevent multiple clicks
    button.classList.add('disabled');
    const articleId = button.dataset.articleId;
    fetch(`/articles/${articleId}/like`, { method: 'POST' })
      .then(response => {
        if (!response.ok) throw new Error('Failed to update like count');
        console.log('Article like count updated');
        // Fetch the updated article data from the server
        fetch(`/articles/${articleId}`)
          .then(response => response.json())
          .then(data => {
            console.log('Update article data received:',data)
            // Update the like count on the page
            const likeCountElement = button.querySelector('.like-count');
            console.log(data.likeCount)
            likeCountElement.textContent = data.likeCount;
          })
          .catch(error => {
            console.error(error);
          });
      })
      .catch(error => {
        console.error(error);
      });
  });
});

});



    </script>
    <script src="source/master.js"></script>
</body>
</html>